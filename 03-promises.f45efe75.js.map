{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAgBC,SAASC,cAAc,uBACvCC,EAAeF,SAASC,cAAc,sBACtCE,EAAYH,SAASC,cAAc,wBA6BzC,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACT,MAAMC,EAAgBC,KAAKC,SAAW,GAEhCC,EAAU,C,SACdT,E,MACAC,GAGEK,EACFH,EAAQM,GAERL,EAAOK,EAAQ,GAEhBR,EAAM,G,CAIb,SAASS,GAAYV,SAACA,EAAQC,MAAEA,IAC9BT,EAAAmB,OAAOC,QAAQ,qBAAqBZ,QAAeC,M,CAGrD,SAASY,GAAWb,SAACA,EAAQC,MAAEA,IAC7BT,EAAAmB,OAAOG,QAAQ,oBAAoBd,QAAeC,M,CApDxCN,SAASC,cAAc,UAE/BmB,iBAAiB,SAErB,SAAuBC,GACrBA,EAAEC,iBAEF,MAAMC,EAAkBC,OAAOzB,EAAc0B,OACvCC,EAAiBF,OAAOtB,EAAauB,OACrCE,EAAcH,OAAOrB,EAAUsB,OAErC,GAAIF,EAAkB,GAAKG,EAAiB,GAAKC,EAAc,EAE7D,YADA9B,EAAAmB,OAAOY,QAAQ,oCAMjB,GAFAxB,EAAc,EAAGmB,GAAiBM,KAAKd,GAAae,MAAMZ,GAEtDS,EAAc,EAAG,CACnB,IAAII,EAAYR,EAAkBG,EAElC,IAAK,IAAIM,EAAI,EAAGA,GAAKL,EAAaK,GAAK,EACrC5B,EAAc4B,EAAGD,GAAWF,KAAKd,GAAae,MAAMZ,GACpDa,GAAaL,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst firstDelayRef = document.querySelector(\"input[name='delay']\")\nconst delayStepRef = document.querySelector(\"input[name='step']\")\nconst amountRef = document.querySelector(\"input[name='amount']\")\nconst btn = document.querySelector(\"button\")\n\nbtn.addEventListener(\"click\", onCreateClick)\n\nfunction onCreateClick(e) {\n  e.preventDefault()\n\n  const firstDelayValue = Number(firstDelayRef.value)\n  const delayStepValue = Number(delayStepRef.value)\n  const amountValue = Number(amountRef.value)\n\n  if (firstDelayValue < 0 || delayStepValue < 0 || amountValue < 1) {\n    Notify.warning(\"Please fill all fields correctly\")\n    return\n  }\n\n  createPromise(1, firstDelayValue).then(onFulfilled).catch(onRejected)\n\n  if (amountValue > 1) {\n    let nextDelay = firstDelayValue + delayStepValue\n\n    for (let i = 2; i <= amountValue; i += 1) {\n      createPromise(i, nextDelay).then(onFulfilled).catch(onRejected)\n      nextDelay += delayStepValue\n    }\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      const promise = {\n        position,\n        delay\n      }\n\n      if (shouldResolve) {\n        resolve(promise)\n      } else {\n        reject(promise)\n      }\n    }, delay)\n  })\n}\n\nfunction onFulfilled({position, delay }) {\n  Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction onRejected({position, delay }) {\n  Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n}\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$firstDelayRef","document","querySelector","$47d4ff9957288465$var$delayStepRef","$47d4ff9957288465$var$amountRef","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","shouldResolve","Math","random","promise","$47d4ff9957288465$var$onFulfilled","Notify","success","$47d4ff9957288465$var$onRejected","failure","addEventListener","e","preventDefault","firstDelayValue","Number","value","delayStepValue","amountValue","warning","then","catch","nextDelay","i"],"version":3,"file":"03-promises.f45efe75.js.map"}